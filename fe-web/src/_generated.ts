/**
 * This file was automatically generated by fastify-extract-definitions.
 * DO NOT MODIFY IT BY HAND. Instead, modify the fastify routes schemas
 * and re-run project to regenerate this file.
 */

export type RootOptions = object;

export type RootGetReply = RootGetReplyStatus200;

export type IdPutReply = IdPutReplyStatus200 | Error;

export type SwaggerGet = object;

export type SwaggerJsonGet = object;

export type SwaggerStaticAllGet = object;

export type SwaggerStaticIndexhtmlGet = object;

export type SwaggerStaticSwaggerInitializerjsGet = object;

export type SwaggerYamlGet = object;

export type EnumsClient = 'web';

export type EnumsEnvironment = 'local' | 'staging' | 'production';

export type EnumsLocale = 'en' | 'ru';

export type EnumsMode = 'production' | 'development' | 'test';

export type EnumsOrderDirection = 'asc' | 'desc';

export interface API {
  '*': {
    OPTIONS: RootOptions;
  };
  '/': {
    GET: RootGet;
  };
  '/:id': {
    PUT: IdPut;
  };
  '/swagger': {
    GET: SwaggerGet;
  };
  '/swagger/': {};
  '/swagger/json': {
    GET: SwaggerJsonGet;
  };
  '/swagger/static/*': {
    GET: SwaggerStaticAllGet;
  };
  '/swagger/static/index.html': {
    GET: SwaggerStaticIndexhtmlGet;
  };
  '/swagger/static/swagger-initializer.js': {
    GET: SwaggerStaticSwaggerInitializerjsGet;
  };
  '/swagger/yaml': {
    GET: SwaggerYamlGet;
  };
}

/**
 * Get ideas list
 */
export interface RootGet {
  Reply: RootGetReply;
}

export interface RootGetReplyStatus200 {
  model: 'appIdea';
  list: AppIdea[];
}

/**
 * AppIdea model
 */
export interface AppIdea {
  id: number;
  name: string;
  count: number;
}

/**
 * Update idea by id
 */
export interface IdPut {
  Params: IdPutParams;
  Reply: IdPutReply;
}

export interface IdPutParams {
  id: string;
}

export interface IdPutReplyStatus200 {
  model: 'appIdea';
  item: AppIdea;
}

/**
 * Error response
 */
export interface Error {
  error: string;
  message?: string;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "enums".
 */
export interface Enums {
  client: EnumsClient;
  environment: EnumsEnvironment;
  locale: EnumsLocale;
  mode: EnumsMode;
  orderDirection: EnumsOrderDirection;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "fragments".
 */
export interface Fragments {
  version: Version;
}

/**
 * Version fragment
 */
export interface Version {
  client: EnumsClient;
  environment: EnumsEnvironment;
  mode: EnumsMode;
  version: string;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "statuses".
 */
export interface Statuses {
  error: Error;
  status: Status;
}

/**
 * Status response
 */
export interface Status {
  status: boolean;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "models".
 */
export interface Models {
  appIdea: AppIdea;
}
